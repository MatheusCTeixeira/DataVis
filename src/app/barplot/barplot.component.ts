import { Component, OnInit } from '@angular/core';
import * as d3 from "d3";
import * as d3Axis from "d3-axis";
import * as d3Scale from "d3-scale";

@Component({
  selector: 'app-barplot',
  templateUrl: './barplot.component.html',
  styleUrls: ['./barplot.component.scss']
})
export class BarplotComponent implements OnInit {
constructor() { }

  margin = ({top: 0, right: 0, bottom: 10, left: 0});
  height = 400
  width = 900
  m = 58;
  n = 5;

  xz = d3.range(this.m)
  yz = d3.range(this.n).map(() => this.bumps(this.m));
  yz2 = d3.range(this.n).map(() => this.bumps(this.m)) as ArrayLike<ArrayLike<number>>;
  yMax = d3.max(this.yz, y => d3.max(y));

  y01z = [[[0,1.0207655673473652,0],[0,0.48044692424919944,0],[0,0.24889386979898023,0],[0,0.15485135327418392,0],[0,0.10970580250819437,0],[0,0.17024242097566297,0],[0,0.18860859954503364,0],[0,0.16050114898896375,0],[0,0.11156920975848746,0],[0,0.17475432423143175,0],[0,0.1546123642968607,0],[0,0.1730546183689914,0],[0,0.12220428027722298,0],[0,0.11060436484243884,0],[0,0.12374117519747535,0],[0,0.17385769611898622,0],[0,0.12350247791013139,0],[0,0.17234837077841025,0],[0,0.1502639653947111,0],[0,0.182637404375401,0],[0,0.15372832839685618,0],[0,0.18876095680681637,0],[0,0.17477960390365577,0],[0,0.1281313786432498,0],[0,0.1896515259015664,0],[0,0.11679907471698177,0],[0,0.1377444586884578,0],[0,0.154063293483148,0],[0,0.1811031243250166,0],[0,0.10360850638700654,0],[0,0.1828598361327323,0],[0,0.15449793226747735,0],[0,0.12386792770337138,0],[0,0.15203367945631202,0],[0,0.19991851695553212,0],[0,0.13038592184750156,0],[0,0.12228284667174531,0],[0,0.14520559264135088,0],[0,0.1746081660012532,0],[0,0.13030671316358278,0],[0,0.1335398803268651,0],[0,0.19243391826908537,0],[0,0.20742207278337643,0],[0,0.16610903524269605,0],[0,0.23571513377392378,0],[0,0.21988704033744025,0],[0,0.3236027070546843,0],[0,0.4903038105416304,0],[0,0.624896140091511,0],[0,0.8641134830588317,0],[0,1.0529777907850284,0],[0,1.297516809159396,0],[0,1.4942766755621952,0],[0,1.6735158638861003,0],[0,1.7766991492875743,0],[0,1.764115842383769,0],[0,1.6426871463068193,0],[0,1.390771701913886,0]],[[1.0207655673473652,1.4023106479155696,1],[0.48044692424919944,0.8480193931152353,1],[0.24889386979898023,0.5237353448951368,1],[0.15485135327418392,0.3986026826422936,1],[0.10970580250819437,0.24092511635096955,1],[0.17024242097566297,0.30266180941919507,1],[0.18860859954503364,0.30502290129143717,1],[0.16050114898896375,0.26875570746239386,1],[0.11156920975848746,0.29410353878660195,1],[0.17475432423143175,0.35500795070424973,1],[0.1546123642968607,0.3403987192317917,1],[0.1730546183689914,0.36995538949281714,1],[0.12220428027722298,0.23793538522088548,1],[0.11060436484243884,0.2353103241036767,1],[0.12374117519747535,0.25959207589818767,1],[0.17385769611898622,0.2940712680298267,1],[0.12350247791013139,0.32021744940632274,1],[0.17234837077841025,0.3633108651653556,1],[0.1502639653947111,0.3261196904941918,1],[0.182637404375401,0.3389923454226296,1],[0.15372832839685618,0.3507747984276019,1],[0.18876095680681637,0.3783011646947491,1],[0.17477960390365577,0.3788245143864615,1],[0.1281313786432498,0.29108612247029997,1],[0.1896515259015664,0.4287120471693616,1],[0.11679907471698177,0.3783522035240316,1],[0.1377444586884578,0.46131910745433363,1],[0.154063293483148,0.6703068560584482,1],[0.1811031243250166,0.8910186957915505,1],[0.10360850638700654,1.0452843001244425,1],[0.1828598361327323,1.3326447857598658,1],[0.15449793226747735,1.5150357081075152,1],[0.12386792770337138,1.478676845135406,1],[0.15203367945631202,1.3617919850206477,1],[0.19991851695553212,1.2886436561514485,1],[0.13038592184750156,0.9349188258753476,1],[0.12228284667174531,0.7455335064609555,1],[0.14520559264135088,0.5969882521908187,1],[0.1746081660012532,0.44189911113780045,1],[0.13030671316358278,0.3949839879857372,1],[0.1335398803268651,0.29800809959381025,1],[0.19243391826908537,0.3589662548515935,1],[0.20742207278337643,0.3289804712451665,1],[0.16610903524269605,0.3314060542876988,1],[0.23571513377392378,0.35035125785858195,1],[0.21988704033744025,0.3357271338076204,1],[0.3236027070546843,0.4884289872193104,1],[0.4903038105416304,0.6603494509023323,1],[0.624896140091511,0.7737858509251061,1],[0.8641134830588317,1.0357437011485642,1],[1.0529777907850284,1.2484647764219288,1],[1.297516809159396,1.4435686259748333,1],[1.4942766755621952,1.613885543273651,1],[1.6735158638861003,1.822826642654904,1],[1.7766991492875743,1.887820657753427,1],[1.764115842383769,1.8934007808288362,1],[1.6426871463068193,1.834580770034925,1],[1.390771701913886,1.5478358795279852,1]],[[1.4023106479155696,2.0364650895772662,2],[0.8480193931152353,1.1725895396561696,2],[0.5237353448951368,0.6891060334925927,2],[0.3986026826422936,0.5841430220945766,2],[0.24092511635096955,0.4235015067267308,2],[0.30266180941919507,0.4395334372565205,2],[0.30502290129143717,0.5032770572621894,2],[0.26875570746239386,0.43199878634256084,2],[0.29410353878660195,0.429336234964974,2],[0.35500795070424973,0.5373064485829662,2],[0.3403987192317917,0.7920901553820716,2],[0.36995538949281714,1.3087587161894356,2],[0.23793538522088548,1.455893728340382,2],[0.2353103241036767,1.1417408477099813,2],[0.25959207589818767,0.697166410897609,2],[0.2940712680298267,0.5100447989290678,2],[0.32021744940632274,0.4725786920065602,2],[0.3633108651653556,0.4664309515345958,2],[0.3261196904941918,0.48782734876539835,2],[0.3389923454226296,0.5300731444045126,2],[0.3507747984276019,0.5037667033207561,2],[0.3783011646947491,0.5515368891083321,2],[0.3788245143864615,0.5715113918597381,2],[0.29108612247029997,0.397807491229814,2],[0.4287120471693616,0.6076714312790217,2],[0.3783522035240316,0.5149730889680094,2],[0.46131910745433363,0.615224750901925,2],[0.6703068560584482,0.8675061312438354,2],[0.8910186957915505,1.0339358652803936,2],[1.0452843001244425,1.2320445861366136,2],[1.3326447857598658,1.4907177956567566,2],[1.5150357081075152,1.6345947394896703,2],[1.478676845135406,1.653862399179494,2],[1.3617919850206477,1.5490856000766553,2],[1.2886436561514485,1.4229631199359882,2],[0.9349188258753476,1.130949496161508,2],[0.7455335064609555,0.8910452986216375,2],[0.5969882521908187,0.7540319485422042,2],[0.44189911113780045,0.6186761656015396,2],[0.3949839879857372,0.5532634994911558,2],[0.29800809959381025,0.4007897331900271,2],[0.3589662548515935,0.4784002138627627,2],[0.3289804712451665,0.5171022411617902,2],[0.3314060542876988,0.47447757154657894,2],[0.35035125785858195,0.5231609803981401,2],[0.3357271338076204,0.44845292759697414,2],[0.4884289872193104,0.6441141030335276,2],[0.6603494509023323,0.8318018908959158,2],[0.7737858509251061,0.9623894291964541,2],[1.0357437011485642,1.2289814221918876,2],[1.2484647764219288,1.4237633668441574,2],[1.4435686259748333,1.5712730320643857,2],[1.613885543273651,1.765447773636894,2],[1.822826642654904,1.95437387026072,2],[1.887820657753427,2.1987988325331087,2],[1.8934007808288362,3.1200185546386248,2],[1.834580770034925,5.372340089124201,2],[1.5478358795279852,7.496443136453944,2]],[[2.0364650895772662,2.2019206881342073,3],[1.1725895396561696,1.3932836051204356,3],[0.6891060334925927,0.901322485381457,3],[0.5841430220945766,0.8218028547907259,3],[0.4235015067267308,0.7441483909152973,3],[0.4395334372565205,0.8730426722209311,3],[0.5032770572621894,1.098895157178979,3],[0.43199878634256084,1.117031682083006,3],[0.429336234964974,1.2962734131202205,3],[0.5373064485829662,1.4912789556454715,3],[0.7920901553820716,1.8442371301395546,3],[1.3087587161894356,2.4619105118494775,3],[1.455893728340382,2.521624245362162,3],[1.1417408477099813,2.1375070387599195,3],[0.697166410897609,1.5774325615673745,3],[0.5100447989290678,1.2100901181412806,3],[0.4725786920065602,1.0301014492540355,3],[0.4664309515345958,0.875875814383407,3],[0.48782734876539835,0.8410076516035028,3],[0.5300731444045126,0.7516817976702138,3],[0.5037667033207561,0.6910281747841391,3],[0.5515368891083321,0.7013718704606454,3],[0.5715113918597381,0.7808211049269338,3],[0.397807491229814,0.6035845998079035,3],[0.6076714312790217,0.7782281299176652,3],[0.5149730889680094,0.6596119847952088,3],[0.615224750901925,0.8096405430084195,3],[0.8675061312438354,0.9841424557764158,3],[1.0339358652803936,1.1464881497880912,3],[1.2320445861366136,1.3894834391297852,3],[1.4907177956567566,1.6684828124234425,3],[1.6345947394896703,1.756047086069124,3],[1.653862399179494,1.8129126808943503,3],[1.5490856000766553,1.7010989288780125,3],[1.4229631199359882,1.5723696184253337,3],[1.130949496161508,1.3293420044920807,3],[0.8910452986216375,0.9976175403666551,3],[0.7540319485422042,0.9385863870763318,3],[0.6186761656015396,0.8039329464418482,3],[0.5532634994911558,0.7990906387066175,3],[0.4007897331900271,0.7429422166119645,3],[0.4784002138627627,0.9037003370321894,3],[0.5171022411617902,1.2155051592941355,3],[0.47447757154657894,1.6258783916751243,3],[0.5231609803981401,2.111476632215245,3],[0.44845292759697414,2.555859042618702,3],[0.6441141030335276,3.1084970255680004,3],[0.8318018908959158,3.5194706427887534,3],[0.9623894291964541,4.48025256104694,3],[1.2289814221918876,5.66095669164803,3],[1.4237633668441574,3.4883753931301826,3],[1.5712730320643857,2.9441448983595233,3],[1.765447773636894,2.6875130960542166,3],[1.95437387026072,2.5449583334583625,3],[2.1987988325331087,2.598587551469974,3],[3.1200185546386248,3.3386863483095754,3],[5.372340089124201,5.548664355749012,3],[7.496443136453944,7.622720686671345,3]],[[2.2019206881342073,2.4919745755834355,4],[1.3932836051204356,1.7432953491438703,4],[0.901322485381457,1.314175246252082,4],[0.8218028547907259,1.4227982077780643,4],[0.7441483909152973,1.5708808902720937,4],[0.8730426722209311,2.0412043191755016,4],[1.098895157178979,2.6405040743651047,4],[1.117031682083006,3.074262784842198,4],[1.2962734131202205,3.7309135525556925,4],[1.4912789556454715,4.496997719973879,4],[1.8442371301395546,5.330431137284253,4],[2.4619105118494775,6.5028153099170165,4],[2.521624245362162,6.911756247554991,4],[2.1375070387599195,6.706633031815997,4],[1.5774325615673745,6.0582017049886,4],[1.2100901181412806,5.363620446574234,4],[1.0301014492540355,4.629019381260905,4],[0.875875814383407,3.759101022664824,4],[0.8410076516035028,3.024368266206517,4],[0.7516817976702138,2.299687002998808,4],[0.6910281747841391,1.74993541966381,4],[0.7013718704606454,1.398727994300053,4],[0.7808211049269338,1.2058179723710738,4],[0.6035845998079035,0.9199713838612996,4],[0.7782281299176652,1.0115409651755587,4],[0.6596119847952088,0.8201938062435801,4],[0.8096405430084195,0.9996423438741854,4],[0.9841424557764158,1.1134924678776192,4],[1.1464881497880912,1.3476281188129304,4],[1.3894834391297852,1.5309590313934627,4],[1.6684828124234425,1.8166973617362723,4],[1.756047086069124,1.9543527166615247,4],[1.8129126808943503,1.9468924027965082,4],[1.7010989288780125,1.8870909871638288,4],[1.5723696184253337,1.8101862623610558,4],[1.3293420044920807,1.6077924681362086,4],[0.9976175403666551,1.4203702103655793,4],[0.9385863870763318,1.5104257501438614,4],[0.8039329464418482,1.571648636563277,4],[0.7990906387066175,1.6823344220986307,4],[0.7429422166119645,1.8090499793958177,4],[0.9037003370321894,2.0969363150161175,4],[1.2155051592941355,2.357123155009347,4],[1.6258783916751243,2.6895260595886175,4],[2.111476632215245,2.921945897338533,4],[2.555859042618702,3.241075044196119,4],[3.1084970255680004,3.5693936469846146,4],[3.5194706427887534,3.896488057052282,4],[4.48025256104694,4.714901262170664,4],[5.66095669164803,5.896723810790483,4],[3.4883753931301826,3.662188932676694,4],[2.9441448983595233,3.1344173365312478,4],[2.6875130960542166,2.837223849137128,4],[2.5449583334583625,2.691962652525223,4],[2.598587551469974,2.787136523628063,4],[3.3386863483095754,3.4529252513697655,4],[5.548664355749012,5.727996467409858,4],[7.622720686671345,7.732161806980009,4]]];
  y1Max = d3.max(this.y01z, y => d3.max(y, d => d[1]));

  x = d3.scaleBand()
        .domain(this.xz.map(v => v.toString()))
        .rangeRound([this.margin.left, this.width - this.margin.right])
        .padding(0.08);

  y = d3.scaleLinear()
        .domain([0, +this.y1Max])
        .range([this.height - this.margin.bottom, this.margin.top])


  xAxis = svg => svg.append("g")
                    .attr("transform", `translate(0,${this.height - this.margin.bottom})`)
                    .call(d3.axisBottom(this.x).tickSizeOuter(0).tickFormat(() => ""));

  z = d3.scaleSequential(d3.interpolateBlues)
        .domain([-0.5 * this.n, 1.5 * this.n]);

  rect = undefined;

  ngOnInit(): void {
    let update = undefined;
    update = this.update("stacked")

    const svg = d3.select("#bar").append("svg")
    .attr("viewBox", `0 0 ${this.width} ${this.height}`);

    this.rect = svg.selectAll("g")
      .data(this.y01z)
      .join("g")
        .attr("fill", (d, i) => this.z(i))
      .selectAll("rect")
      .data(d => d)
      .join("rect")
        .attr("x", (d, i) => this.x(i.toString()))
        .attr("y", this.height - this.margin.bottom)
        .attr("width", this.x.bandwidth())
        .attr("height", 0);

        this.rect.transition()
        .duration(500)
        .delay((d, i) => i * 20)
        .attr("y", d => this.y(d[1]))
        .attr("height", d => this.y(d[0]) - this.y(d[1]))
      .transition()
        .attr("x", (d, i) => this.x(i))
        .attr("width", this.x.bandwidth());

    svg.append("g")
        .call(this.xAxis);


  }

  bumps(m: number) {
    const values: number[] = [];

    // Initialize with uniform random values in [0.1, 0.2).
    for (let i = 0; i < m; ++i) {
      values[i] = 0.1 + 0.1 * Math.random();
    }

    // Add five random bumps.
    for (let j = 0; j < 5; ++j) {
      const x = 1 / (0.1 + Math.random());
      const y = 2 * Math.random() - 0.5;
      const z = 10 / (0.1 + Math.random());
      for (let i = 0; i < m; i++) {
        const w = (i / m - y) * z;
        values[i] += x * Math.exp(-w * w);
      }
    }

    // Ensure all values are positive.
    for (let i = 0; i < m; ++i) {
      values[i] = Math.max(0, values[i]);
    }

    return values;
  }

  transitionGrouped() {
    this.y.domain([0, this.yMax]);

    if (!this.rect)
      return;

    this.rect.transition()
        .duration(500)
        .delay((d, i) => i * 20)
        .attr("x", (d, i) => this.x(i) + this.x.bandwidth() / this.n * d[2])
        .attr("width", this.x.bandwidth() / this.n)
      .transition()
        .attr("y", d => this.y(d[1] - d[0]))
        .attr("height", d => this.y(0) - this.y(d[1] - d[0]));
  }

  transitionStacked() {
    this.y.domain([0, +this.y1Max]);

    if (!this.rect)
      return;

    this.rect.transition()
        .duration(500)
        .delay((d, i) => i * 20)
        .attr("y", d => this.y(d[1]))
        .attr("height", d => this.y(d[0]) - this.y(d[1]))
      .transition()
        .attr("x", (d, i) => this.x(i))
        .attr("width", this.x.bandwidth());
  }

  update(layout) {
    if (layout === "stacked")
      this.transitionStacked();
    else
      this.transitionGrouped();
  }

}
